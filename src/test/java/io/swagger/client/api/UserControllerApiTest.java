/*
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.4
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddUserDTO;
import io.swagger.client.model.ErrorDTO;
import io.swagger.client.model.RequestPasswordResetDTO;
import io.swagger.client.model.ResetPasswordDTO;
import io.swagger.client.model.StateDTO;
import io.swagger.client.model.UserDTO;
import io.swagger.client.model.UsersDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Ignore
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    
    /**
     * Create a user
     *
     * Create a user. Username and email must be unique. Password must contain at least an uppercase letter, a number and between 8-20 characters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserUsingPOSTTest() throws ApiException {
        AddUserDTO addUserDTO = null;
        api.addUserUsingPOST(addUserDTO);

        // TODO: test validations
    }
    
    /**
     * Check an email confirmation status
     *
     * Check the currnet state of an email confirmation request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkEmailConfirmationStatusUsingGETTest() throws ApiException {
        String token = null;
        StateDTO response = api.checkEmailConfirmationStatusUsingGET(token);

        // TODO: test validations
    }
    
    /**
     * Check password reset request status
     *
     * Check the current state of a password reset request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkPasswordResetRequestStatusUsingGETTest() throws ApiException {
        String token = null;
        StateDTO response = api.checkPasswordResetRequestStatusUsingGET(token);

        // TODO: test validations
    }
    
    /**
     * Confirm email account
     *
     * Confirm an email account with a currently active email confirmation request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmEmailUsingPUTTest() throws ApiException {
        String token = null;
        api.confirmEmailUsingPUT(token);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * Delete a user by a given user id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingDELETETest() throws ApiException {
        String id = null;
        api.deleteUserUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Get user by username
     *
     * Fetch a user by a given username
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByUsernameUsingGETTest() throws ApiException {
        String userName = null;
        UserDTO response = api.getUserByUsernameUsingGET(userName);

        // TODO: test validations
    }
    
    /**
     * Get user by id
     *
     * Fetch a user by a given user id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGETTest() throws ApiException {
        String id = null;
        UserDTO response = api.getUserUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * Get all users
     *
     * Fetch a list of all registered users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUsingGETTest() throws ApiException {
        UsersDTO response = api.getUsersUsingGET();

        // TODO: test validations
    }
    
    /**
     * Request a password reset
     *
     * Request a password reset for a user with specified email. The email must be confirmed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetUsingPOSTTest() throws ApiException {
        RequestPasswordResetDTO requestPasswordResetDTO = null;
        api.requestPasswordResetUsingPOST(requestPasswordResetDTO);

        // TODO: test validations
    }
    
    /**
     * Reset user password
     *
     * Reset a user password with a currently active password reset request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordUsingPUTTest() throws ApiException {
        ResetPasswordDTO resetPasswordDTO = null;
        api.resetPasswordUsingPUT(resetPasswordDTO);

        // TODO: test validations
    }
    
}
