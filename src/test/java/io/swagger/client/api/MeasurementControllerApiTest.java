/*
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.4
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddMeasurementDTO;
import io.swagger.client.model.AddValuesToMeasurementDTO;
import io.swagger.client.model.ErrorDTO;
import io.swagger.client.model.MeasurementDTO;
import io.swagger.client.model.MeasurementsDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeasurementControllerApi
 */
@Ignore
public class MeasurementControllerApiTest {

    private final MeasurementControllerApi api = new MeasurementControllerApi();

    
    /**
     * Add values to a measurement
     *
     * Add measured values of a given pollutant to a specified measurement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addValuesToMeasurementUsingPOSTTest() throws ApiException {
        Integer measurementId = null;
        AddValuesToMeasurementDTO addValuesToMeasurementDTO = null;
        api.addValuesToMeasurementUsingPOST(measurementId, addValuesToMeasurementDTO);

        // TODO: test validations
    }
    
    /**
     * Create a measurement
     *
     * Create a measurement. Place and pollutants ids must already exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMeasurementUsingPOSTTest() throws ApiException {
        AddMeasurementDTO addMeasurementDTO = null;
        Map<String, String> details = null;
        Boolean authenticated = null;
        api.createMeasurementUsingPOST(addMeasurementDTO, details, authenticated);

        // TODO: test validations
    }
    
    /**
     * Delete a measurement
     *
     * Delete a specified measurement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMeasurementUsingDELETETest() throws ApiException {
        Integer measurementId = null;
        api.deleteMeasurementUsingDELETE(measurementId);

        // TODO: test validations
    }
    
    /**
     * Edit a measurement
     *
     * Edit a specified measurement. All values must be valid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editMeasurementUsingPUTTest() throws ApiException {
        MeasurementDTO measurementDTO = null;
        api.editMeasurementUsingPUT(measurementDTO);

        // TODO: test validations
    }
    
    /**
     * Get measurement by id
     *
     * Fetch a single measurement by a given id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeasurementByIdUsingGETTest() throws ApiException {
        Integer measurementId = null;
        MeasurementDTO response = api.getMeasurementByIdUsingGET(measurementId);

        // TODO: test validations
    }
    
    /**
     * Get measurements (optional filters)
     *
     * Fetch a list of measurements. Measurements can be filtered by a combination of date, time, place and/or pollutant filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeasurementUsingGETTest() throws ApiException {
        String date = null;
        String time = null;
        String place = null;
        String pollutant = null;
        MeasurementsDTO response = api.getMeasurementUsingGET(date, time, place, pollutant);

        // TODO: test validations
    }
    
}
