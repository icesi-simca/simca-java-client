/*
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.4
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddMeasurementDTO;
import io.swagger.client.model.AddValuesToMeasurementDTO;
import io.swagger.client.model.ErrorDTO;
import io.swagger.client.model.MeasurementDTO;
import io.swagger.client.model.MeasurementsDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeasurementControllerApi {
    private ApiClient apiClient;

    public MeasurementControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasurementControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addValuesToMeasurementUsingPOST
     * @param measurementId Id of the measuremet to add values to (required)
     * @param addValuesToMeasurementDTO addValuesToMeasurementDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addValuesToMeasurementUsingPOSTCall(Integer measurementId, AddValuesToMeasurementDTO addValuesToMeasurementDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addValuesToMeasurementDTO;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurement/{measurementId}/add-values"
            .replaceAll("\\{" + "measurementId" + "\\}", apiClient.escapeString(measurementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addValuesToMeasurementUsingPOSTValidateBeforeCall(Integer measurementId, AddValuesToMeasurementDTO addValuesToMeasurementDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'measurementId' is set
        if (measurementId == null) {
            throw new ApiException("Missing the required parameter 'measurementId' when calling addValuesToMeasurementUsingPOST(Async)");
        }
        
        // verify the required parameter 'addValuesToMeasurementDTO' is set
        if (addValuesToMeasurementDTO == null) {
            throw new ApiException("Missing the required parameter 'addValuesToMeasurementDTO' when calling addValuesToMeasurementUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addValuesToMeasurementUsingPOSTCall(measurementId, addValuesToMeasurementDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add values to a measurement
     * Add measured values of a given pollutant to a specified measurement.
     * @param measurementId Id of the measuremet to add values to (required)
     * @param addValuesToMeasurementDTO addValuesToMeasurementDTO (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addValuesToMeasurementUsingPOST(Integer measurementId, AddValuesToMeasurementDTO addValuesToMeasurementDTO) throws ApiException {
        addValuesToMeasurementUsingPOSTWithHttpInfo(measurementId, addValuesToMeasurementDTO);
    }

    /**
     * Add values to a measurement
     * Add measured values of a given pollutant to a specified measurement.
     * @param measurementId Id of the measuremet to add values to (required)
     * @param addValuesToMeasurementDTO addValuesToMeasurementDTO (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addValuesToMeasurementUsingPOSTWithHttpInfo(Integer measurementId, AddValuesToMeasurementDTO addValuesToMeasurementDTO) throws ApiException {
        com.squareup.okhttp.Call call = addValuesToMeasurementUsingPOSTValidateBeforeCall(measurementId, addValuesToMeasurementDTO, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add values to a measurement (asynchronously)
     * Add measured values of a given pollutant to a specified measurement.
     * @param measurementId Id of the measuremet to add values to (required)
     * @param addValuesToMeasurementDTO addValuesToMeasurementDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addValuesToMeasurementUsingPOSTAsync(Integer measurementId, AddValuesToMeasurementDTO addValuesToMeasurementDTO, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addValuesToMeasurementUsingPOSTValidateBeforeCall(measurementId, addValuesToMeasurementDTO, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createMeasurementUsingPOST
     * @param addMeasurementDTO addMeasurementDTO (required)
     * @param details  (optional)
     * @param authenticated  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMeasurementUsingPOSTCall(AddMeasurementDTO addMeasurementDTO, Map<String, String> details, Boolean authenticated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addMeasurementDTO;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "details", details));
        if (authenticated != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authenticated", authenticated));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMeasurementUsingPOSTValidateBeforeCall(AddMeasurementDTO addMeasurementDTO, Map<String, String> details, Boolean authenticated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addMeasurementDTO' is set
        if (addMeasurementDTO == null) {
            throw new ApiException("Missing the required parameter 'addMeasurementDTO' when calling createMeasurementUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMeasurementUsingPOSTCall(addMeasurementDTO, details, authenticated, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a measurement
     * Create a measurement. Place and pollutants ids must already exist.
     * @param addMeasurementDTO addMeasurementDTO (required)
     * @param details  (optional)
     * @param authenticated  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createMeasurementUsingPOST(AddMeasurementDTO addMeasurementDTO, Map<String, String> details, Boolean authenticated) throws ApiException {
        createMeasurementUsingPOSTWithHttpInfo(addMeasurementDTO, details, authenticated);
    }

    /**
     * Create a measurement
     * Create a measurement. Place and pollutants ids must already exist.
     * @param addMeasurementDTO addMeasurementDTO (required)
     * @param details  (optional)
     * @param authenticated  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createMeasurementUsingPOSTWithHttpInfo(AddMeasurementDTO addMeasurementDTO, Map<String, String> details, Boolean authenticated) throws ApiException {
        com.squareup.okhttp.Call call = createMeasurementUsingPOSTValidateBeforeCall(addMeasurementDTO, details, authenticated, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a measurement (asynchronously)
     * Create a measurement. Place and pollutants ids must already exist.
     * @param addMeasurementDTO addMeasurementDTO (required)
     * @param details  (optional)
     * @param authenticated  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMeasurementUsingPOSTAsync(AddMeasurementDTO addMeasurementDTO, Map<String, String> details, Boolean authenticated, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMeasurementUsingPOSTValidateBeforeCall(addMeasurementDTO, details, authenticated, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMeasurementUsingDELETE
     * @param measurementId Id of the measurement to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMeasurementUsingDELETECall(Integer measurementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurement/{measurementId}"
            .replaceAll("\\{" + "measurementId" + "\\}", apiClient.escapeString(measurementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMeasurementUsingDELETEValidateBeforeCall(Integer measurementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'measurementId' is set
        if (measurementId == null) {
            throw new ApiException("Missing the required parameter 'measurementId' when calling deleteMeasurementUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteMeasurementUsingDELETECall(measurementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a measurement
     * Delete a specified measurement.
     * @param measurementId Id of the measurement to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMeasurementUsingDELETE(Integer measurementId) throws ApiException {
        deleteMeasurementUsingDELETEWithHttpInfo(measurementId);
    }

    /**
     * Delete a measurement
     * Delete a specified measurement.
     * @param measurementId Id of the measurement to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMeasurementUsingDELETEWithHttpInfo(Integer measurementId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMeasurementUsingDELETEValidateBeforeCall(measurementId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a measurement (asynchronously)
     * Delete a specified measurement.
     * @param measurementId Id of the measurement to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMeasurementUsingDELETEAsync(Integer measurementId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMeasurementUsingDELETEValidateBeforeCall(measurementId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editMeasurementUsingPUT
     * @param measurementDTO measurementDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editMeasurementUsingPUTCall(MeasurementDTO measurementDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = measurementDTO;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editMeasurementUsingPUTValidateBeforeCall(MeasurementDTO measurementDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'measurementDTO' is set
        if (measurementDTO == null) {
            throw new ApiException("Missing the required parameter 'measurementDTO' when calling editMeasurementUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = editMeasurementUsingPUTCall(measurementDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit a measurement
     * Edit a specified measurement. All values must be valid.
     * @param measurementDTO measurementDTO (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editMeasurementUsingPUT(MeasurementDTO measurementDTO) throws ApiException {
        editMeasurementUsingPUTWithHttpInfo(measurementDTO);
    }

    /**
     * Edit a measurement
     * Edit a specified measurement. All values must be valid.
     * @param measurementDTO measurementDTO (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editMeasurementUsingPUTWithHttpInfo(MeasurementDTO measurementDTO) throws ApiException {
        com.squareup.okhttp.Call call = editMeasurementUsingPUTValidateBeforeCall(measurementDTO, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit a measurement (asynchronously)
     * Edit a specified measurement. All values must be valid.
     * @param measurementDTO measurementDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editMeasurementUsingPUTAsync(MeasurementDTO measurementDTO, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editMeasurementUsingPUTValidateBeforeCall(measurementDTO, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMeasurementByIdUsingGET
     * @param measurementId Id of the measurement to be fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMeasurementByIdUsingGETCall(Integer measurementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurement/{measurementId}"
            .replaceAll("\\{" + "measurementId" + "\\}", apiClient.escapeString(measurementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMeasurementByIdUsingGETValidateBeforeCall(Integer measurementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'measurementId' is set
        if (measurementId == null) {
            throw new ApiException("Missing the required parameter 'measurementId' when calling getMeasurementByIdUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMeasurementByIdUsingGETCall(measurementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get measurement by id
     * Fetch a single measurement by a given id.
     * @param measurementId Id of the measurement to be fetched (required)
     * @return MeasurementDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MeasurementDTO getMeasurementByIdUsingGET(Integer measurementId) throws ApiException {
        ApiResponse<MeasurementDTO> resp = getMeasurementByIdUsingGETWithHttpInfo(measurementId);
        return resp.getData();
    }

    /**
     * Get measurement by id
     * Fetch a single measurement by a given id.
     * @param measurementId Id of the measurement to be fetched (required)
     * @return ApiResponse&lt;MeasurementDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MeasurementDTO> getMeasurementByIdUsingGETWithHttpInfo(Integer measurementId) throws ApiException {
        com.squareup.okhttp.Call call = getMeasurementByIdUsingGETValidateBeforeCall(measurementId, null, null);
        Type localVarReturnType = new TypeToken<MeasurementDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get measurement by id (asynchronously)
     * Fetch a single measurement by a given id.
     * @param measurementId Id of the measurement to be fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMeasurementByIdUsingGETAsync(Integer measurementId, final ApiCallback<MeasurementDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMeasurementByIdUsingGETValidateBeforeCall(measurementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MeasurementDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMeasurementUsingGET
     * @param date Date filter (optional)
     * @param time Time filter (optional)
     * @param place Place filter (optional)
     * @param pollutant Pollutant filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMeasurementUsingGETCall(String date, String time, String place, String pollutant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/measurement/v1/measurements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "date", date));
        if (time != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "time", time));
        if (place != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "place", place));
        if (pollutant != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pollutant", pollutant));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMeasurementUsingGETValidateBeforeCall(String date, String time, String place, String pollutant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getMeasurementUsingGETCall(date, time, place, pollutant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get measurements (optional filters)
     * Fetch a list of measurements. Measurements can be filtered by a combination of date, time, place and/or pollutant filters.
     * @param date Date filter (optional)
     * @param time Time filter (optional)
     * @param place Place filter (optional)
     * @param pollutant Pollutant filter (optional)
     * @return MeasurementsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MeasurementsDTO getMeasurementUsingGET(String date, String time, String place, String pollutant) throws ApiException {
        ApiResponse<MeasurementsDTO> resp = getMeasurementUsingGETWithHttpInfo(date, time, place, pollutant);
        return resp.getData();
    }

    /**
     * Get measurements (optional filters)
     * Fetch a list of measurements. Measurements can be filtered by a combination of date, time, place and/or pollutant filters.
     * @param date Date filter (optional)
     * @param time Time filter (optional)
     * @param place Place filter (optional)
     * @param pollutant Pollutant filter (optional)
     * @return ApiResponse&lt;MeasurementsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MeasurementsDTO> getMeasurementUsingGETWithHttpInfo(String date, String time, String place, String pollutant) throws ApiException {
        com.squareup.okhttp.Call call = getMeasurementUsingGETValidateBeforeCall(date, time, place, pollutant, null, null);
        Type localVarReturnType = new TypeToken<MeasurementsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get measurements (optional filters) (asynchronously)
     * Fetch a list of measurements. Measurements can be filtered by a combination of date, time, place and/or pollutant filters.
     * @param date Date filter (optional)
     * @param time Time filter (optional)
     * @param place Place filter (optional)
     * @param pollutant Pollutant filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMeasurementUsingGETAsync(String date, String time, String place, String pollutant, final ApiCallback<MeasurementsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMeasurementUsingGETValidateBeforeCall(date, time, place, pollutant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MeasurementsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
