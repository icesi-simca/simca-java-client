/*
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.4
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * AddMeasurementDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-19T00:57:09.000-05:00")
public class AddMeasurementDTO {
  @SerializedName("date")
  private DateTime date = null;

  @SerializedName("placeId")
  private Integer placeId = null;

  @SerializedName("pollutantIds")
  private List<Integer> pollutantIds = null;

  @SerializedName("time")
  private DateTime time = null;

  public AddMeasurementDTO date(DateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Creation date of the measurement
   * @return date
  **/
  @ApiModelProperty(value = "Creation date of the measurement")
  public DateTime getDate() {
    return date;
  }

  public void setDate(DateTime date) {
    this.date = date;
  }

  public AddMeasurementDTO placeId(Integer placeId) {
    this.placeId = placeId;
    return this;
  }

   /**
   * Place&#39;s id where the measurement is made
   * @return placeId
  **/
  @ApiModelProperty(value = "Place's id where the measurement is made")
  public Integer getPlaceId() {
    return placeId;
  }

  public void setPlaceId(Integer placeId) {
    this.placeId = placeId;
  }

  public AddMeasurementDTO pollutantIds(List<Integer> pollutantIds) {
    this.pollutantIds = pollutantIds;
    return this;
  }

  public AddMeasurementDTO addPollutantIdsItem(Integer pollutantIdsItem) {
    if (this.pollutantIds == null) {
      this.pollutantIds = new ArrayList<Integer>();
    }
    this.pollutantIds.add(pollutantIdsItem);
    return this;
  }

   /**
   * Get pollutantIds
   * @return pollutantIds
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getPollutantIds() {
    return pollutantIds;
  }

  public void setPollutantIds(List<Integer> pollutantIds) {
    this.pollutantIds = pollutantIds;
  }

  public AddMeasurementDTO time(DateTime time) {
    this.time = time;
    return this;
  }

   /**
   * Creation time of the measurement
   * @return time
  **/
  @ApiModelProperty(value = "Creation time of the measurement")
  public DateTime getTime() {
    return time;
  }

  public void setTime(DateTime time) {
    this.time = time;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddMeasurementDTO addMeasurementDTO = (AddMeasurementDTO) o;
    return Objects.equals(this.date, addMeasurementDTO.date) &&
        Objects.equals(this.placeId, addMeasurementDTO.placeId) &&
        Objects.equals(this.pollutantIds, addMeasurementDTO.pollutantIds) &&
        Objects.equals(this.time, addMeasurementDTO.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, placeId, pollutantIds, time);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddMeasurementDTO {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    pollutantIds: ").append(toIndentedString(pollutantIds)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

